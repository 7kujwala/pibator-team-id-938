b“”” Project name : <PI-BATOR>
    Author list : <K.UJWALA, G.LAKSHMI DEVI, M.JYOTHIRMAI DEVI,
                   P.BHAVANI SAI, B.MAHITHA REDDY>
    File name : <PI-BATOR CODE> 
    Functions : <bin2dec, my_user_task>
    Global variables : <None> “””                                                   

import BlynkLib
import time
import numpy as np
import cv2

cap = cv2.VideoCapture(0)

BLYNK_AUTH = '197310da90cc47dd945e18f501e23f12'

# initialize Blynk
blynk = BlynkLib.Blynk(BLYNK_AUTH)

# register the task running every 3 sec
# (period must be a multiple of 50 ms)

import RPi.GPIO as GPIO
import time
“”” Function name : bin2dec
    Input : string_num
    Output: string converted integer with string_num and 2
    Logic : pin connections and their state
    Example call : bin2dec(10) “””

def bin2dec(string_num):
    return str(int(string_num), 2))

data = []

GPIO.setmode(GPIO.BCM)

GPIO.setup(4,GPIO.OUT) #input to DHT sensor for ground
GPIO.output(4,GPIO.HIGH)
GPIO.setup(5,GPIO.OUT) # input to DHT sensor for Vcc
GPIO.output(5,GPIO.LOW)
Time.sleep(0.025)
GPIO.output(4,GPIO.LOW)
Time.sleep(0.02)
GPIO.setup(22,GPIO.OUT) # input to Relay
GPIO.output(22,GPIO.HIGH)
Time sleep(0.02)
GPIO.setup(6,GPIO.OUT) # input to Motor module
GPIO.output(6,GPIO.LOW)
Time.sleep(0.025)
GPIO.setup(26,GPIO.OUTPUT) # input to Turner module
GPIO.output(26,GPIO.LOW)
Time.sleep(0.025)

GPIO.setup(4, GPIO.IN, pull_up_down=GPIO.PUD_UP)
“”” Function name : my_user_task
    Input : None
    Output: getting mail with temperature, humidity details
    Logic : variables undergo changes based on defined range and 
            makes humidity,temperature change and getting mail.
    Example call : my_user_task() ”””

def my_user_task():

    for i in range(0,500):
        data.append(GPIO.input(4))

    bit_count = 0
    tmp = 0 # temperature becomes zero intially
    count = 0 # for count
    HumidityBit = “”
    TemperatureBit = “”
    crc = “”

    try :
         while data[count] == 1:
             tmp = 1
             count = count + 1
              
         for i in range(0, 32):
             bit_count = 0 # bit_count becomes zero in the above range

             while data[count] == 0:
                 tmp = 1 
                 count = count + 1 # count will increases by one

             while data[count] == 1:
                 bit_count = bit_count + 1
                 count = count + 1
             if bit_count > 3:
                 if i>=0 and i<8:
                     HumidityBit = HumidityBit + “1”
                 if i>=16 and i<24:
                     TemperatureBit = TemperatureBit + “1”
             else:
                 if i>=0 and i<8:
                     HumidityBit = HumidityBit + “0”
                 if i>=16 and i<24:
                     TemperatureBit = TemperatureBit + “0”
     except:
         print “ERR_RANGE”
         exit(0)

     try:
         for i in range(0, 8):
             bit_count = 0

             while data[count] == 0:
                 tmp = 1
                 count = count + 1

             while data[count] == 1:
                 bit_count = bit_count + 1
                 count = count + 1



             if bit_count > 3:
                 crc = crc + “1”

             else:
                crc = crc + “0” 
     except:
         print “ERR_RANGE”
         exit(0)

     Humidity = bin2dec(HumidityBit)
     Temperature = bin2dec(TemperatureBit)

     if Temperature == 29 and Humidity == 31:
        Blynk.virtualwrite(1, Temperature) # Temperature will be displayed in Blynk app
        Blynk.virtualwrite(2, Humidity) # Humidity will be displayed in Blynk app
     else:
         if Temperature>29 and Humidity>31:
            GPIO.output(5,GPIO.HIGH) # DHT sensor becomes high
            GPIO.output(22,GPIO.LOW) # RELAY becomes low and heating device will remains in off position
         else:
            GPIO.output(5,GPIO.LOW)
            GPIO.output(22,GPIO.HIGH) # RELAY becomes high and switch on the heating device because of insufficient temperature
     if int(Humidity) + int(Temperature) – int(bin2dec(crc)) == 0:
         print “Humidity:”+ Humidity +”%”
         print “Temperature:”+ Temperature + “C”
     else:
         print “ERR_CRC”
     tm = 0
     if tm/3600 == 0 and tm <= 604800:
        GPIO.output(6,GPIO.HIGH) # Motor module will switch on
        GPIO.output(26,GPIO.HIGH) # Turner module also on and starts turning because of motor
     else:
         GPIO.output(6,GPIO.LOW) # Motor will be switched off 
         GPIO.output(26,GPIO.LOW) # Turner will also comes to off position
     ret, frame = cap.read()
     def mail(to, subject, text, attach):
         print “mail(): to = “ + to
         msg = MIMEMultipart()
         msg[‘From’] = gmail_user # user email id will be defined for getting message
         msg_to = ‘, ‘.join(to)
         print “msg_to=’ + msg_to
         msg[‘To’] = msg_to
         ...

 
                   
            
 
   





